buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'


group 'org.madblock'
version '1.0'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

jar {
    jar.enabled(false) // Removes the empty MadBlockServer jar
    shadowJar.enabled(false)
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven {
            url = 'https://repo.nukkitx.com/maven-snapshots'
        }
        maven {
            url = 'https://repo.opencollab.dev/maven-releases/'
        }
        maven {
            url = 'https://repo.opencollab.dev/maven-snapshots/'
        }
    }

    dependencies {
        shadow 'com.google.code.gson:gson:2.8.6'
        shadow 'cn.nukkit:nukkit:1.0-SNAPSHOT'

        compileOnly 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'
    }
}

task deepClean {
    group = "madgradle"
    dependsOn allprojects.collect({ it.tasks.findByName('clean') })
}


task assembleProduction(type: Copy) {
    group = "madgradle"
    description = "Used to gather all the jars required for a production server"
    dependsOn deepClean

    from allprojects.collect {
        if(it.path == ":External:ScoreboardAPI") return it.tasks.withType(Jar)
        if(!it.path.startsWith(":External")) return it.tasks.withType(Jar)

        return new ArrayList<>()

    } into "$buildDir/alllibs"
}

task packageProduction(type: Copy) {
    group = "madgradle"
    description = "Used to gather all the jars required for a production server"
    dependsOn assembleProduction, shadowJar

    from allprojects.collect {
        if(it.path == ":External:ScoreboardAPI") return it.tasks.named("shadowJar")
        if(!it.path.startsWith(":External")) return it.tasks.named("shadowJar")

        return new ArrayList<>()

    } into "$buildDir/production"
}


